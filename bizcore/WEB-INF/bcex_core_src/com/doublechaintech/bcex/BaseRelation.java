/*
******************************           DO NOT EDIT THIS FILE!!!           				*********************************
******************************         Please edit CustomRelation.java instead!        		*********************************	
******************************         不要编辑这个文件，这个文件每次都会被机器人覆盖!!!              *********************************
******************************    CustomRelation.java专门用于定制，该文件存在的时候不会被覆盖      	*********************************


*/
package com.doublechaintech.bcex;
import java.util.HashMap;
import java.util.Map;

public class BaseRelation{

	
	Map<String, String> relationMapping ;
	
	public String getRelation(String fromType, String fromId, String targetField, String targetId)
	{
		//the entry for external calls, ugly code with many path just works, using a map is fine but lose the way to override the methods
		
		if(relationMapping == null){
			prepareRelation();
		}

		String key = fromType+"->"+targetField;
		
		String relation = relationMapping.get(key);
		if(relation == null){
			throw new IllegalArgumentException("Not able to find any relation to the target type: "+ targetField);
		}
		return relation;
		
	}
	
	protected void addGenericRelation(String fromType, String relation,String targetField)
	{
		if(relationMapping == null){
			relationMapping = new HashMap<String,String>();
		}
		String key = fromType.trim()+"->"+targetField.trim();
		relationMapping.put(key, relation);
	}
	protected void replaceGenericRelation(String fromType, String relation,String targetField)
	{
		addGenericRelation( fromType, relation, targetField );
	}
	
	
	
	Map<String, String[]> relationIndex ;
	protected void addRelationIndex(String fromType,String related[])
	{
		if(relationIndex == null){
			relationIndex = new HashMap<String,String[]>();
		}
		
		relationIndex.put(fromType, related);
	}
	protected void replaceRelationIndex(String fromType,String related[])
	{
		addRelationIndex( fromType, related);
	}
	
	public String getTableFieldName(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = expr.split(":");
		if(splitedValues.length < 1){
			throw new IllegalArgumentException("Not able to split expr: "+expr);
		}
		
		return splitedValues[0];
	}
	public String getBeanFieldName(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = getTableFieldName(expr).split("_");
		String ret = splitedValues[0];
		for(int i=1;i<splitedValues.length;i++){
			
			ret = ret+splitedValues[i].substring(0,1).toUpperCase()+splitedValues[i].substring(1);
			
		}
		
		return ret;
	}
	public String getFieldType(String expr){
		//the expr looks like owner:DecorationAccelerator
		String[] splitedValues = expr.split(":");
		if(splitedValues.length < 2){
			throw new IllegalArgumentException("Not able to split expr: "+expr);
		}
		
		return splitedValues[1];
	}
	public String [] getRelationIndex(String type){
		
		if(relationIndex == null){
			prepareRelationIndex();
		}
		
		String relations [] =relationIndex.get(type);
		if(relations == null){
			//throw new IllegalArgumentException("Not able to find related objects for type: "+ type);
		}
		return relations;
	}
	
	protected void prepareRelationIndex()
	{
		
		
		String [] changeRequestTypeRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("ChangeRequestType",changeRequestTypeRelatedObjectNames);

		String [] changeRequestRelatedObjectNames = {"request_type:ChangeRequestType","platform:Platform"};
		addRelationIndex("ChangeRequest",changeRequestRelatedObjectNames);

		String [] registrationRelatedObjectNames = {"change_request:ChangeRequest"};
		addRelationIndex("Registration",registrationRelatedObjectNames);

		String [] startExamRelatedObjectNames = {"change_request:ChangeRequest"};
		addRelationIndex("StartExam",startExamRelatedObjectNames);

		String [] answerQuestionRelatedObjectNames = {"user:WechatUser","question:Question","change_request:ChangeRequest"};
		addRelationIndex("AnswerQuestion",answerQuestionRelatedObjectNames);

		String [] examStatusRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("ExamStatus",examStatusRelatedObjectNames);

		String [] questionRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("Question",questionRelatedObjectNames);

		String [] examRankingRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("ExamRanking",examRankingRelatedObjectNames);

		String [] answerRelatedObjectNames = {"question:Question"};
		addRelationIndex("Answer",answerRelatedObjectNames);

		String [] wechatUserRelatedObjectNames = {"platform:Platform"};
		addRelationIndex("WechatUser",wechatUserRelatedObjectNames);

		String [] wechatLoginInfoRelatedObjectNames = {"wechat_user:WechatUser"};
		addRelationIndex("WechatLoginInfo",wechatLoginInfoRelatedObjectNames);

		String [] examRelatedObjectNames = {"status:ExamStatus","user:WechatUser"};
		addRelationIndex("Exam",examRelatedObjectNames);

		String [] userAnswerRelatedObjectNames = {"question:Question","exam:Exam"};
		addRelationIndex("UserAnswer",userAnswerRelatedObjectNames);

		String [] faultAnswerRelatedObjectNames = {"user:WechatUser","exam:Exam"};
		addRelationIndex("FaultAnswer",faultAnswerRelatedObjectNames);

		String [] userWhiteListRelatedObjectNames = {"domain:UserDomain"};
		addRelationIndex("UserWhiteList",userWhiteListRelatedObjectNames);

		String [] secUserRelatedObjectNames = {"domain:UserDomain"};
		addRelationIndex("SecUser",secUserRelatedObjectNames);

		String [] userAppRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("UserApp",userAppRelatedObjectNames);

		String [] quickLinkRelatedObjectNames = {"app:UserApp"};
		addRelationIndex("QuickLink",quickLinkRelatedObjectNames);

		String [] listAccessRelatedObjectNames = {"app:UserApp"};
		addRelationIndex("ListAccess",listAccessRelatedObjectNames);

		String [] objectAccessRelatedObjectNames = {"app:UserApp"};
		addRelationIndex("ObjectAccess",objectAccessRelatedObjectNames);

		String [] loginHistoryRelatedObjectNames = {"sec_user:SecUser"};
		addRelationIndex("LoginHistory",loginHistoryRelatedObjectNames);

		String [] formMessageRelatedObjectNames = {"form:GenericForm"};
		addRelationIndex("FormMessage",formMessageRelatedObjectNames);

		String [] formFieldMessageRelatedObjectNames = {"form:GenericForm"};
		addRelationIndex("FormFieldMessage",formFieldMessageRelatedObjectNames);

		String [] formFieldRelatedObjectNames = {"form:GenericForm"};
		addRelationIndex("FormField",formFieldRelatedObjectNames);

		String [] formActionRelatedObjectNames = {"form:GenericForm"};
		addRelationIndex("FormAction",formActionRelatedObjectNames);

		String [] candidateElementRelatedObjectNames = {"container:CandidateContainer"};
		addRelationIndex("CandidateElement",candidateElementRelatedObjectNames);

	
	
	}
	protected static final String TRUST_CHAIN_READ = "R";
	protected static final String TRUST_CHAIN_WRITE = "W";
	protected static final String TRUST_CHAIN_MANAGEMENT = "M";
	protected static final String TRUST_CHAIN_EXECUTION = "X";
	
	protected static final String TRUST_READ = "r";
	protected static final String TRUST_WRITE = "w";
	protected static final String TRUST_MANAGEMENT = "m";
	protected static final String TRUST_EXECUTION = "x";
	
	protected static final String TRUST_CHAIN_ALL = "MXWR";
	
	
	//small 'r','w','m','x' mean no chain trust, just trust the same level
	//default for reading trust chain, the default sequence are MXWR, the order is not affect the result
	protected void prepareRelation()
	{
		addGenericRelation("ChangeRequestType"                     ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("ChangeRequest"                         ,TRUST_CHAIN_READ,"requestType");
		addGenericRelation("ChangeRequest"                         ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("Registration"                          ,TRUST_CHAIN_READ,"changeRequest");
		addGenericRelation("StartExam"                             ,TRUST_CHAIN_READ,"changeRequest");
		addGenericRelation("AnswerQuestion"                        ,TRUST_CHAIN_READ,"user");
		addGenericRelation("AnswerQuestion"                        ,TRUST_CHAIN_READ,"question");
		addGenericRelation("AnswerQuestion"                        ,TRUST_CHAIN_READ,"changeRequest");
		addGenericRelation("ExamStatus"                            ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("Question"                              ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("ExamRanking"                           ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("Answer"                                ,TRUST_CHAIN_READ,"question");
		addGenericRelation("WechatUser"                            ,TRUST_CHAIN_READ,"platform");
		addGenericRelation("WechatLoginInfo"                       ,TRUST_CHAIN_READ,"wechatUser");
		addGenericRelation("Exam"                                  ,TRUST_CHAIN_READ,"status");
		addGenericRelation("Exam"                                  ,TRUST_CHAIN_READ,"user");
		addGenericRelation("UserAnswer"                            ,TRUST_CHAIN_READ,"question");
		addGenericRelation("UserAnswer"                            ,TRUST_CHAIN_READ,"exam");
		addGenericRelation("FaultAnswer"                           ,TRUST_CHAIN_READ,"user");
		addGenericRelation("FaultAnswer"                           ,TRUST_CHAIN_READ,"exam");
		addGenericRelation("UserWhiteList"                         ,TRUST_CHAIN_READ,"domain");
		addGenericRelation("SecUser"                               ,TRUST_CHAIN_READ,"domain");
		addGenericRelation("UserApp"                               ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("QuickLink"                             ,TRUST_CHAIN_READ,"app");
		addGenericRelation("ListAccess"                            ,TRUST_CHAIN_READ,"app");
		addGenericRelation("ObjectAccess"                          ,TRUST_CHAIN_READ,"app");
		addGenericRelation("LoginHistory"                          ,TRUST_CHAIN_READ,"secUser");
		addGenericRelation("FormMessage"                           ,TRUST_CHAIN_READ,"form");
		addGenericRelation("FormFieldMessage"                      ,TRUST_CHAIN_READ,"form");
		addGenericRelation("FormField"                             ,TRUST_CHAIN_READ,"form");
		addGenericRelation("FormAction"                            ,TRUST_CHAIN_READ,"form");
		addGenericRelation("CandidateElement"                      ,TRUST_CHAIN_READ,"container");
	
	}

	


}


